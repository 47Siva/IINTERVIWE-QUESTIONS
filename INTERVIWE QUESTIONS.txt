1. What is the difference between JDK,JRE and JVM?
JDK: Java Development Kit
The JDK is a software development kit used to develop Java applications. It includes JRE (Java Runtime Environment), an interpreter/loader (Java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed for Java development.

JRE: Java Runtime Environment
The JRE is a part of the JDK and is used to run Java applications. It provides the libraries, Java Virtual Machine (JVM), and other components necessary to run applications written in Java.

JVM : Java Virtual Machine
The JVM is a virtual machine that runs Java bytecode. It is an abstract computing machine that enables a computer to run a Java program.

JDK: For developing Java applications.
JRE: For running Java applications.
JVM: For executing Java bytecode.

2.What is the Difference between the == operator and equal method?
== operator :
The == operator is used to compare the memory addresses (references) of two objects to check if they point to the same location in memory.
Usage :
Primitive Types: For primitive data types (int, char, etc.), == compares the actual values.
Objects: For object references, == checks if the references point to the same object in memory.

equal() Method :
The equals() method is defined in the Object class and is meant to compare the actual content (state) of two objects for equality.
Usage :
Override: Many classes, especially in the Java standard library (like String, Integer, etc.), override the equals() method to provide a meaningful comparison based on the object's state rather than its memory address.

3. What is the Garbage collection in Java?
Garbage collection in Java is a process that automatically manages memory. When you create objects in your Java program, they use memory. Once those objects are no longer needed, the garbage collector comes in to clean up and free that memory, making it available for new objects. This helps prevent memory problems like memory leaks, which can slow down or crash your program. The garbage collector runs in the background and periodically checks which objects are no longer being used. It then removes those objects to free up memory. This automatic memory management makes it easier for developers to write efficient Java programs without worrying about manually releasing memory.

4.What is The different Type of memory in allocation in JVM?
In the Java Virtual Machine (JVM), memory is allocated into several distinct areas, each serving a specific purpose to optimize performance and manage resources efficiently. The primary types of memory allocation in the JVM include heap memory, stack memory, and metaspace. Heap memory is used for dynamic allocation of Java objects and is divided into the Young Generation and the Old Generation. The Young Generation handles new objects and is further split into the Eden Space and Survivor Spaces, while the Old Generation stores long-lived objects. Stack memory is dedicated to each thread and manages method call frames, local variables, and method results. Metaspace, introduced in Java 8, replaces the older Permanent Generation and is used for class metadata and method information, dynamically adjusting in size based on the application's needs. These distinct memory regions work together to ensure efficient execution and management of Java applications, providing both developers and the JVM with a structured approach to handling memory.





