
1. What is the difference between JDK,JRE and JVM?
JDK: Java Development Kit
The JDK is a software development kit used to develop Java applications. It includes JRE (Java Runtime Environment), an interpreter/loader (Java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed for Java development.

JRE: Java Runtime Environment
The JRE is a part of the JDK and is used to run Java applications. It provides the libraries, Java Virtual Machine (JVM), and other components necessary to run applications written in Java.

JVM : Java Virtual Machine
The JVM is a virtual machine that runs Java bytecode. It is an abstract computing machine that enables a computer to run a Java program.

JDK: For developing Java applications.
JRE: For running Java applications.
JVM: For executing Java bytecode.

-------------------------------------------------------------------------------------------------------------------------
2.What is the Difference between the == operator and equal method?
== operator :
The == operator is used to compare the memory addresses (references) of two objects to check if they point to the same location in memory.
Usage :
Primitive Types: For primitive data types (int, char, etc.), == compares the actual values.
Objects: For object references, == checks if the references point to the same object in memory.

equal() Method :
The equals() method is defined in the Object class and is meant to compare the actual content (state) of two objects for equality.
Usage :
Override: Many classes, especially in the Java standard library (like String, Integer, etc.), override the equals() method to provide a meaningful comparison based on the object's state rather than its memory address.

-----------------------------------------------------------------------------------------------------------------------------
3. What is the Garbage collection in Java?
Garbage collection in Java is a process that automatically manages memory. When you create objects in your Java program, they use memory. Once those objects are no longer needed, the garbage collector comes in to clean up and free that memory, making it available for new objects. This helps prevent memory problems like memory leaks, which can slow down or crash your program. The garbage collector runs in the background and periodically checks which objects are no longer being used. It then removes those objects to free up memory. This automatic memory management makes it easier for developers to write efficient Java programs without worrying about manually releasing memory.

-----------------------------------------------------------------------------------------------------------------------------
4.What is The different Type of memory in allocation in JVM?
In the Java Virtual Machine (JVM), memory is allocated into several distinct areas, each serving a specific purpose to optimize performance and manage resources efficiently. The primary types of memory allocation in the JVM include heap memory, stack memory, and metaspace. Heap memory is used for dynamic allocation of Java objects and is divided into the Young Generation and the Old Generation. The Young Generation handles new objects and is further split into the Eden Space and Survivor Spaces, while the Old Generation stores long-lived objects. Stack memory is dedicated to each thread and manages method call frames, local variables, and method results. Metaspace, introduced in Java 8, replaces the older Permanent Generation and is used for class metadata and method information, dynamically adjusting in size based on the application's needs. These distinct memory regions work together to ensure efficient execution and management of Java applications, providing both developers and the JVM with a structured approach to handling memory.

----------------------------------------------------------------------------------------------------------------------------
5.What is JIT?
     The Just-In-Time (JIT) compiler is a critical component of the Java Virtual Machine (JVM) 
designed to improve the performance of Java applications by dynamically converting Java bytecode 
into native machine code at runtime.

-----------------------------------------------------------------------------------------------------------------------------
6.What about classLoader?
      A class loader in Java is a part of the Java Runtime Environment (JRE) responsible for 
dynamically loading classes into the Java Virtual Machine (JVM) at runtime.
Class loaders ensure that classes are loaded into memory only when needed, enabling features like 
dynamic loading, unloading, and secure execution of Java programs.

-----------------------------------------------------------------------------------------------------------------------------
7.when is object create and allocate ?
   Objects are created and allocated at runtime, not compile time.
8.When you declare a reference variable, such as Person person;
no memory is allocated for the object itself, only for the reference.
Memory for the object is allocated when you use the new keyword to create an instance of a class.
--------------------------------------------------------------------------------------------------------------------------

9.) What is Collections?
	In Java, a collection is an object that groups multiple elements into a single unit. 
	Collections are used to store, retrieve, manipulate, and communicate aggregate data. 
	They provide a convenient way to work with groups of related objects.
	The Java Collections Framework provides a set of interfaces and classes to handle different types of collections. 

-----------------------------------------------------------------------------------------------------------------------------
10.) What is the advantages of collections :
	To overcome the drawbacks of arrays.
	Increase performance by providing dynamic memory, linked list, treeset...
	Type Safety with Generics, avoid runtime errors using class cast exception
	Increased Code Reusability
	Iterator, for each loop

-----------------------------------------------------------------------------------------------------------------------------
11.) What is ArrayList?
	An ArrayList in Java is a resizable array implementation of the List interface. 
	It is part of the Java Collections Framework and provides a way to store and manipulate a dynamic array of elements. 
	Unlike standard arrays, ArrayList can grow and shrink in size automatically as elements are added or removed. 
	Key features : Dynamic size, Indexed access, Orderd collection, Allow duplicate

---------------------------------------------------------------------------------------------------------------------------
12.) What is Iterator?
	An Iterator in Java is an object that enables you to traverse a collection, typically one element at a time.
	It is a part of the Java Collections Framework and provides a standardized way to access elements in a collection sequentially without exposing the underlying structure.
	Common methods : hasNext(), next(), remove().
	Key features : Forward direction, Universal.

----------------------------------------------------------------------------------------------------------------------------
13.) Difference between Collection and Collections.
Collection :
	A root interface in the Java Collections Framework.
	Represents a group of objects.
	Provides methods to operate on elements within the collection.
Collections :
	A utility class with static methods.
	Provides algorithms to operate on collections.
	Contains methods for sorting, searching, and modifying collections.

---------------------------------------------------------------------------------------------------------------------------
14. What is Loosely coupling and Tightly coupling ?
   i) Loosely coupling - Loosely coupled systems have components that are minimally dependent on each other. Changes in one component have little or no impact on others. 

interface MessageService {
    void sendMessage(String message, String receiver);
}
class EmailService implements MessageService {
    public void sendMessage(String message, String receiver) {
        System.out.println("Email sent to " + receiver + " with Message=" + message);
    }
}

  ii) Tightly Coupling - Tightly coupled systems have components that are highly dependent on one another. A change in one module will likely result in changes in the other.

   class EmailService {
    public void sendEmail(String message, String receiver) {
        System.out.println("Email sent to " + receiver + " with Message=" + message);
    }
}
	
class MyApplication {
    private EmailService emailService = new EmailService();

    public void processMessages(String message, String receiver) {
        emailService.sendEmail(message, receiver);
    }
}

-----------------------------------------------------------------------------------------------------------------------------
15.Abstract class 
         Abstract class in Java is a class that cannot be instantiated directly and is meant to be subclassed. It can contain abstract methods (methods without an implementation) as well as concrete methods (methods with an implementation). The purpose of an abstract class is to provide a base class that other classes can extend.

         cannot create an instance of an abstract class using the new keyword. Abstract classes are meant to be subclassed.

         abstract class can have abstract methods, which are methods declared without an implementation. 

         Abstract classes allow to provide a partial implementation. They can define common behavior that multiple subclasses share, while leaving some methods to be implemented by the subclasses.

-----------------------------------------------------------------------------------------------------------------------------
16.What is the difference between the string, string buffer , String Builder?
String :
string is basically an object that represents sequence of char values.  Strings are immutable. Once a String object is created, it cannot be changed. Any modification to a String results in the creation of a new String object.
Since String is immutable, it is inherently thread-safe. Multiple threads can safely access a single String instance concurrently.

StringBuilder :
objects are mutable. You can modify the content of a StringBuffer object without creating new objects.
A mutable sequence of characters. This class provides an API compatible with StringBuffer, but with no guarantee of synchronization. use multithread Environments 

StringBuffer :
A thread-safe, mutable sequence of characters.A string buffer is like a String, but can be modified.StringBuilder is faster than StringBuffer due to the lack of synchronization, making it the preferred choice for single-threaded scenarios or when thread safety is managed externally.

-----------------------------------------------------------------------------------------------------------------------------
17) Exception :
                   In Java, an exception is an event that disrupts the normal flow of the program. It is an object that the Java runtime system generates when 
                   an error occurs. Exceptions can be caught and handled to prevent the program from crashing. They are categorized into:
   Types of exception:
                     1)Checked Exceptions:
                                  These must be either caught or declared in the method signature using the throws keyword. 
                                    Example: IOException.
                     2)Unchecked Exceptions: 
                                  These do not need to be declared or caught. They are subclasses of RuntimeException. 
                                    Example: NullPointerException.
                     3)Errors:
                                  These are serious problems that applications should not try to handle.
                                    Example: OutOfMemoryError. 
-----------------------------------------------------------------------------------------------------------------------------
18.) Difference between ArrayList and Linked List.

Key			  |	ArrayList							  |	LinkedList
_________________________________________________________________________________________________________________________________________
Internal Implementation:  |	ArrayList internally uses a dynamic array to store its elements.  |	LinkedList uses Doubly Linked 																	List to store its elements.
_________________________________________________________________________________________________________________________________________
Manipulation		  |	ArrayList is slow as array manipulation is slower.		  |	LinkedList is faster being node 																based as not much bit shifting 																	required.
_________________________________________________________________________________________________________________________________________
Implementation		  |	ArrayList implements only List.					  |	LinkedList implements List as 																	well as Queue. It can acts as a 																queue as well.
_________________________________________________________________________________________________________________________________________
Access			  |	ArrayList is faster in storing and accessing data.		  |	LinkedList is faster in 																	manipulation of data.

-----------------------------------------------------------------------------------------------------------------------------
19.What is Encapsulation ?
⦁	The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users.
⦁	Declare class variables ,attributes as private.Provide public GET and SET methods to access & update the value of private variable.
⦁	The private variables can only be accessed with in the same class.
⦁	GET methods returns the variable value. SET method takes a parameter .Here THIS  keyword is used to refer to the current object.
⦁	GET SET followed by the name of the variable with the first letter in uppercase.
⦁	Variable declare private  cannot access it from outside this class.
Why encapsulation ?
⦁	Better control of class attributes & methods.
⦁	class attributes can be made read only- if if we onlly used the GET method..Write only -if u only use the SET method
⦁	Increased security of data.

----------------------------------------------------------------------------------------------------------------------------------------------------------
20. What is the difference between the continue and break statement?
         => Break and continue are two important keywords used in loops. When using a break keyword in a loop, the loop breaks instantly.
         => The current iteration breaks when using the continue keyword, and the loop continues with the next iteration.

------------------------------------------------------------------------------------------------------------------------------------------------------------
21. Is a RelationShip vs Has a relationShip
        1. Is-a Relationship (Inheritance)
The "is-a" relationship is used to establish inheritance between a superclass and a subclass. It indicates that one class is a specialized version of another. This relationship is implemented using the extends keyword in Java.
        2. Has-a Relationship (Composition/Aggregation)
The "has-a" relationship, also known as composition or aggregation, is used to represent that one class contains or is composed of another class. This relationship is typically implemented by having one class hold a reference to another class as a member variable.
------------------------------------------------------------------------------------------------------------------------------------------------------------
22.What is bytecode, and why is it important in Java?
         Bytecode is the intermediate representation of Java code after compilation. It is important because it allows Java to be platform-independent; the same bytecode can run on any device with a JVM, enabling the "write once, run anywhere" capability.
-----------------------------------------------------------------------------------------------------------------------------------------
23.What is a Comparator in java?
Consider the example where we have an ArrayList of employees like( EId, Ename, Salary), etc. Now if we want to sort this list of employees based on the names of employees. Then that is not possible to sort using the Collections.sort() method. We need to provide something to the sort() function depending on what values we have to perform sorting. Then in that case a comparator is used.

Comparator is the interface in java that contains the compare method. And by overloading the compare method, we can define that on what basis we need to compare the values. 
-----------------------------------------------------------------------------------------------------------------------------------------
24.) What is ORM?
	Object Relational Mapping (ORM) is a technique used in creating a "bridge" between object-oriented programs and, in most cases, relational databases.
	Put another way, you can see the ORM as the layer that connects object oriented programming (OOP) to relational databases.

	When interacting with a database using OOP languages, you'll have to perform different operations like creating, reading, updating, and deleting (CRUD) data from a database. By design, you use SQL for performing these operations in relational databases.

	While using SQL for this purpose isn't necessarily a bad idea, the ORM and ORM tools help simplify the interaction between relational databases and different OOP languages.
What is an ORM Tool?
	An ORM tool is software designed to help OOP developers interact with relational databases. 
So instead of creating your own ORM software from scratch, you can make use of these tools.

Here's an example of SQL code that retrieves information about a particular user from a database:
Example: 	"SELECT id, name, email, country, phone_number FROM users WHERE id = 20"
The code above returns information about a user — name, email, country, and phone_number — from a table called users. 
Using the WHERE clause, we specified that the information should be from a user with an id of 20.

On the other hand, an ORM tool can do the same query as above with simpler methods. 
That is: 
Example: 	users.GetById(20)
So the code above does the same as the SQL query. Note that every ORM tool is built differently so the methods are never the same, 
but the general purpose is similar.

ORM tools can generate methods like the one in the last example.
Most OOP languages have a variety of ORM tools that you can choose from. 
Here are some of the most popular for Java:
	 Hibernate, Apache OpenJPA, EclipseLink, jOOQ, Oracle TopLink

-----------------------------------------------------------------------------------------------------------------------------------------
25.PUT:
 =>When updating, it replaces the entire resource with the data provided in the request.  
 =>Multiple identical PUT requests will have the same effect as a single one. For example, if you PUT the same resource twice, the second request will not change anything.
 =>The client sends a complete representation of the resource, meaning all fields should be provided even if only one field is being updated.
  PATCH:
 =>PATCH is used to apply partial modifications to a resource. Instead of sending a complete representation of the resource, you only send the fields that you want to update.
 =>While PATCH can be idempotent, it doesn't have to be. The outcome may depend on the current state of the resource.
 =>You send only the fields that need to be updated. The server will update the resource accordingly without affecting other fields.

--------------------------------------------------------------------------------------------------------------------------------------------
26.Why is Java considered platform-independent, while the Java Virtual Machine (JVM) is platform-dependent?
Java is considered platform-independent because Java programs are compiled into bytecode, which can be run on any system that has a Java Virtual Machine (JVM). The JVM interprets the bytecode into machine code that can be executed by the specific operating system and hardware, making Java programs portable across different platforms.

However, the JVM itself is platform-dependent because it is specifically designed to work with the operating system and hardware of the platform it is installed on. Each platform (e.g., Windows, Linux, macOS) has its own implementation of the JVM, tailored to the specific characteristics of that platform. This platform-specific JVM ensures that the bytecode runs correctly on the underlying system.
--------------------------------------------------------------------------------------------------------------------------------------------
27.) What is JPA?
	JPA stands for Java Persistence API. It is a specification for accessing, persisting, and managing data between java objects/classes and a relational database.
Here access and persist means access refers to reading data form a relational database and persist refers to writing java object to relational database.
It provides a set of interfaces, annotations and classes that allow developers to define and manipulate entites.
"specification" refers to a set of rules, guidelines, and interfaces that define how Java objects can be mapped to relational database tables.
Example :

Application ORM1 -methods like(insert, delete,update,select)
	    ORM2- methods like(addObject, updateObject,deleteObj, selectObj)
	    ORM3- methos like(insertObj,updateObj,removeObj,selectObj)
  like if we are using "hibernate in ORM 1", after some years if there any issues on ORM 1, we need to change to another ORM tool like "ORM2-eclipse link or topLink"
so in this case we have to change entire code on the application....its a complicated one,
here we have JPA to rectify this issue by providing interfaces, so we dont need to change any code, just change the configuration thats all.
28.) synchronization 
        synchronization refers to controlling access to shared resources by multiple threads to prevent data inconsistency. When a method or block is synchronized, only one thread can access it at a time, ensuring thread safety.
        Asynchronization -  on the other hand, allows multiple threads to execute concurrently without waiting for each other, which can improve performance but requires careful handling to avoid issues like race conditions.
        A thread is a single sequence of execution within a program. Every Java program has at least one thread, the main thread, which runs the main() method.
        Multithreading is the ability of a CPU or a single core in a multi-core processor to execute multiple threads concurrently. In Java, multithreading allows multiple threads to run independently, making the program more efficient by utilizing the CPU better.
29.) Lampda Expression
        Lambda expressions are a new feature in Java 8 that provide a clear and concise way to represent a method interface using an expression. They enable you to treat functionality as a method argument or to create small anonymous functions.
        Lambda expressions are particularly useful in reducing boilerplate code and making it easier to work with collections, especially when combined with the Stream API. They enable more readable and maintainable code by focusing on the "what" rather than the "how" in functional operations.


30.) TypeCasting
      typecasting is a way to convert one data type into another. This is commonly done when you need to treat an object of one type as another type,
or when you want to convert between primitive types.
Two Types of typeCasting:
      1.Automatic TypeCasting
      2.Manual TypeCasting  
Automatic TypeCasting:
      This happens automatically when you assign a smaller primitive type to a larger primitive type.
Manual TypeCasting:
      This requires manual intervention using a cast operator because you are converting a larger type to a smaller type, which might lose information.

----------------------------------------------------------------------------------------------------------------------------------------------
31.difference Betweeen C++ and Java?
C++ :
         =>C++ is a middle-level language that supports both procedural and object-oriented programming paradigms. It allows low-level memory manipulation and is often used for system-level programming.
        => C++ allows manual memory management. Developers have to allocate and deallocate memory using pointers, which gives more control but also increases the risk of memory leaks and errors like segmentation faults.
        => C++ is platform-dependent. The code compiled on one operating system may not run on another without recompilation.
        =>C++ code is compiled directly to machine code, which means it usually runs faster but is platform-dependent.
        =>C++ uses pointers, which provide powerful capabilities but can lead to complex and error-prone code.
Java :
       =>Java is a high-level, object-oriented programming language that is designed to be platform-independent. It runs on the Java Virtual Machine (JVM), making it suitable for building cross-platform applications.
       => Java uses automatic memory management through garbage collection. The JVM automatically handles memory allocation and deallocation, reducing the risk of memory leaks.
       =>Java is platform-independent at the source level, thanks to the JVM. Write once, run anywhere (WORA) is a key feature of Java.
       => Java does not support multiple inheritance with classes to avoid complexity but allows multiple inheritance through interfaces.
       =>Java has a simpler syntax compared to C++. It removes features like pointers, operator overloading, and multiple inheritance with classes, which makes it easier to learn and use.
       =>Exception handling in Java is mandatory. Java has a robust exception handling mechanism, and all errors are handled through exceptions, making the code more reliable.
      =>Java is widely used in web development, enterprise applications, mobile applications (especially Android), and large-scale systems that need portability.
      =>Java code is compiled to bytecode, which is then interpreted or compiled to machine code by the JVM, making it platform-independent but potentially slower than C++.
       =>Java does not support pointers explicitly. It uses references instead, which simplifies memory access and avoids common pointer-related errors.
----------------------------------------------------------------------------------------------------------------------------------------
32.) What is Funtional Interface?
	An Interface that contains exactly one abstract method is known as functional interface. It can have any number of default, static methods but can contain only one abstract method. It can also declare methods of object class. Functional Interface is also known as Single Abstract Method Interfaces or SAM Interfaces. We refer functional interface with @functionalInterface annotation.
Example:
@FunctionalInterface
public interface MyFunctionalInterface {
    void doSomething();
}
MyFunctionalInterface myFunction = () -> System.out.println("Hello World!");
myFunction.doSomething(); // prints "Hello World!"
Pre defined functional interfaces:
•	Supplier
•	Consumer
•	Function
•	Predicate
•	UnaryOperator
•	BinaryOperator
--------------------------------------------------------------------------------------------------------------------------------------------
33. What is Java Interface?
* An interface is a completely "abstract class" that is used to group related methods with empty bodies.
* Like abstract classes, interfaces cannot be used to create objects.
* Interface methods do not have a body - the body is provided by the "implement" class
* On implementation of an interface, you must override all of its methods
* Interface methods are by default abstract and public
* Interface attributes are by default public, static and final
* An interface cannot contain a constructor (as it cannot be used to create objects)
* The interface is accessed by a class, then we use the "Implement" keyword.
* the interface is accessed by a interface then use Eextends" key word.
--------------------------------------------------------------------------------------------------------------------------------------------

34. What is main method? Why it is Important?
	* In Java, the main method is the entry point of any standalone Java application. It's the method that the Java Virtual Machine (JVM) looks for when running a program.
	* Entry Point: The main method is crucial because it serves as the starting point of a Java application. When you run a program, the JVM invokes this method first.
	* Execution Flow: The code inside the main method is executed sequentially, which controls the overall flow of the program.
	* Command-Line Arguments: The args parameter allows you to pass arguments to your program from the command line, enabling dynamic input.
	* Foundation for Applications: Every standalone Java application must have at least one class with a main method to be executed. Without it, the program won't run.
	* Main method-a thappa eluthina, JVM oru error throw pannum, mostly "Main method not found" or "Main method is not static" maadhiri messages kaattum. Idha correct panna main method-a exact syntax-a, public static void main(String[] args), use pannanum.
--------------------------------------------------------------------------------------------------------------------------------------------
35. Strin Joiner in Java 8?
	StringJoiner is a utility class in Java that was introduced in Java 8. It is used to construct a sequence of characters separated by a delimiter (like commas, spaces, etc.). You can also specify a prefix and suffix to wrap around the entire sequence.
	Delimiter: A separator between each element.
	Prefix and Suffix: Optional strings that are added before the first element and after the last element, respectively.
	StringJoiner is particularly useful for joining a collection of strings, especially when you need to separate them with a specific delimiter and optionally enclose them with a prefix and suffix.
-------------------------------------------------------------------------------------------------------------------------------------------------
36.Threads :
     thread is a lightweight process that can run concurrently with other threads to perform tasks in parallel.
Extending the Thread Class
     This is one way to create a thread by subclassing the Thread class and overriding its run() method.
Implementing the Runnable Interface
     Another, and often preferred, way is to implement the Runnable interface and pass an instance of the implementing class to a Thread object.
Thread Methods
     start(): Starts the thread. Calls the run() method internally.
     run(): Contains the code that the thread executes.
     sleep(long millis): Puts the thread to sleep for a specified number of milliseconds.
     join(): Makes the current thread wait for another thread to finish.
     yield(): Pauses the currently executing thread to allow other threads to execute.
     setPriority(int newPriority): Sets the priority of the thread.
----------------------------------------------------------------------------------------------------------------------------------------------------
37.Repository
    Spring Data JPA is a module in the Spring Framework that simplifies the functionality of the Java Persistence API (JPA). By using Spring Data JPA, the tasks of interacting with databases become very simple for developers.
   Data Access Layer (DAL) is a layer in a software architecture that separates database and application logic.
   Spring Data JPA is a module in the Spring Framework that simplifies the functionality of the Java Persistence API (JPA). By using Spring Data JPA, the tasks of interacting with databases become very simple for developers.
   By creating a Repository interface, we can easily write the required queries. Spring Data JPA automatically generates queries based on name.
   By directly extending CrudRepository or JpaRepository in the Repository interface, we get basic CRUD (Create, Read, Update, Delete) operations. Thus, there is no need to repeat the code for basic operations.
----------------------------------------------------------------------------------------------------------------------------------------------------
38.) What is Packages & its types?
	A package is a way to group related classes, interfaces, and sub-packages together. Packages help organize the code in a modular, hierarchical structure and prevent naming conflicts between classes with the same name.

1.)Built-in Packages (Java API Packages): These are the standard packages that come with the Java Development Kit (JDK) and provide a wide range of functionality for developers to use. Some common built-in packages are:

java.lang: Contains fundamental classes such as String, Math, Integer, etc.
java.util: Includes utility classes like ArrayList, HashMap, Date, etc.
java.io: Provides classes for input and output operations.
java.nio: For non-blocking I/O operations.
java.sql: Used for database connectivity.
2.)User-defined Packages: These are packages created by developers to organize their own classes, interfaces, and sub-packages. Creating user-defined packages helps in better code management and avoids class name conflicts.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
39.Java Regular Expression :
    Java Regular Expressions (RegEx) is an efficient method used to search, match and manipulate text patterns.
    Pattern: Regular expression-ஐ represent செய்யும் class.
    Matcher: Pattern மற்றும் string-இன் match-ஐ represent செய்யும் class.
    PatternSyntaxException: Regular expression-இல் syntax error இருந்தால் throw செய்யப்படும் exception.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
40.) Difference between Vector and Deque.
Vector: A dynamic array that can grow and shrink in size. It allows random access and is useful for situations where you need fast access to elements by index. It's part of the java.util package.
Synchronized by default, meaning it is thread-safe for concurrent use but incurs performance overhead due to synchronization.

Deque: A double-ended queue that allows elements to be inserted or removed from both ends (front and back). It is useful when you need to add or remove elements at both ends of a list. Deque is an interface that is implemented by classes like ArrayDeque and LinkedList.
Typically not thread-safe (e.g., ArrayDeque), but you can make it thread-safe by using external synchronization mechanisms (like wrapping it with Collections.synchronizedDeque).
